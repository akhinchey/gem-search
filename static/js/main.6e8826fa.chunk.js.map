{"version":3,"sources":["store/gemSearchReducer.js","components/StyledComponents.jsx","components/Gem.jsx","components/SavedGemsList.jsx","components/GemResultList.jsx","components/ViewSavedButton.jsx","components/HeaderSearchBar.jsx","components/Error.jsx","components/App.jsx","store/storeConfig.js","index.js"],"names":["gemSearchSlice","createSlice","name","initialState","currentGems","savedGems","currentSearch","reducers","setCurrentGems","state","action","payload","saveGem","newGem","unshift","unsaveGem","gemToUnsave","filter","gem","setCurrentSearch","actions","reducer","mq","map","bp","colors","GlobalStyle","styles","css","AppHeader","styled","h1","GemUl","ul","HeaderWrapper","header","SearchSection","div","SearchFormWrapper","SearchForm","form","SearchInput","input","ViewSavedLinkSection","MainContent","MainContentHeader","SubHeader","Query","span","GemName","a","GemDescription","p","StyledButton","button","SearchButton","SaveButton","BackLink","Link","Gem","gemNotSaved","handleSave","href","documentation_uri","target","onClick","info","SavedGemsList","dispatch","useDispatch","useSelector","handleUnsaveGem","url","length","to","key","GemResultList","gemName","find","ViewSavedButton","HeaderSearchBar","formData","setFormData","handleSubmit","onSubmit","type","value","onChange","e","Error","App","history","useHistory","useState","query","URLSearchParams","useLocation","search","fetchGems","axios","get","then","response","data","catch","error","push","useEffect","location","pathname","preventDefault","alert","path","gemSearchPersistConfig","storage","whitelist","store","configureStore","persistReducer","gemSearchReducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","ReactDOM","render","loading","basename","document","getElementById"],"mappings":"+PAIMA,EAAiBC,YAAY,CACjCC,KAAM,YACNC,aAAc,CACZC,YAAa,GACbC,UAAW,GACXC,cAAe,MAEjBC,SAAU,CACRC,eADQ,SACOC,EAAOC,GACpBD,EAAML,YAAcM,EAAOC,SAE7BC,QAJQ,SAIAH,EAAOC,GACb,IAAMG,EAASH,EAAOC,QACtBF,EAAMJ,UAAUS,QAAQD,IAE1BE,UARQ,SAQEN,EAAOC,GACf,IAAMM,EAAcN,EAAOC,QAC3BF,EAAMJ,UAAYI,EAAMJ,UAAUY,QAChC,SAAAC,GAAG,OAAIA,EAAIhB,OAASc,EAAYd,SAGpCiB,iBAdQ,SAcSV,EAAOC,GACtBD,EAAMH,cAAgBI,EAAOC,YAMjCS,EAEEpB,EAFFoB,QACAC,EACErB,EADFqB,QAIAT,EAIEQ,EAJFR,QACAG,EAGEK,EAHFL,UACAP,EAEEY,EAFFZ,eACAW,EACEC,EADFD,iBAGaE,I,u1HCtCf,IAEMC,EAFc,CAAC,IAAK,KAEHC,KACrB,SAAAC,GAAE,mCAA0BA,EAA1B,UAGEC,EACG,OADHA,EAEE,OAFFA,EAGO,UAHPA,EAII,UAJJA,EAKG,UAGIC,EAAc,kBACzB,kBAAC,IAAD,CACEC,OAAQC,YAAF,QAUGC,EAAYC,IAAOC,GAAV,IAEXN,EAEPH,EAAG,GAKMG,GAKAO,EAAQF,IAAOG,GAAV,IAIaR,GASlBS,GAAgBJ,IAAOK,OAAV,IACVV,GAUHW,GAAgBN,IAAOO,IAAV,KAKbC,GAAoBR,IAAOO,IAAV,IAG1Bf,EAAG,IAQMiB,GAAaT,IAAOU,KAAV,KAKVC,GAAcX,IAAOY,MAAV,IAQpBpB,EAAG,GAKHA,EAAG,IAKMqB,GAAuBb,IAAOO,IAAV,IAKpBZ,EAWTH,EAAG,IAiBMsB,GAAcd,IAAOO,IAAV,IAIbZ,EAMPH,EAAG,GAGHA,EAAG,IAKMuB,GAAoBf,IAAOO,IAAV,IAEDZ,GAKhBqB,GAAYhB,IAAOO,IAAV,KAITU,GAAQjB,IAAOkB,KAAV,IACPvB,GAIEwB,GAAUnB,IAAOoB,EAAV,IAITzB,GAGE0B,GAAiBrB,IAAOsB,EAAV,KAKrBC,GAAevB,IAAOwB,OAAV,IACP7B,EACWA,GAUT8B,GAAezB,YAAOuB,GAAPvB,CAAH,IAIrBR,EAAG,GAGHA,EAAG,IAKMkC,GAAa1B,YAAOuB,GAAPvB,CAAH,KAOV2B,GAAW3B,YAAO4B,IAAP5B,CAAH,IACVL,GCrMIkC,GAlBH,SAAC,GAAsC,IAApCzC,EAAmC,EAAnCA,IAAK0C,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAC/B,OACE,4BACE,kBAACZ,GAAD,CAASa,KAAM5C,EAAI6C,kBAAmBC,OAAO,UAC1C9C,EAAIhB,MAEP,kBAACsD,GAAD,CACES,QAAS,WACPJ,EAAW3C,KAGZ0C,EAAc,OAAS,SAL1B,QAOA,kBAACT,GAAD,KAAiBjC,EAAIgD,QCmBZC,GA9BO,WACpB,IAAMC,EAAWC,cADS,EAEwBC,aAAY,SAAA7D,GAAK,OAAIA,KAA/DJ,EAFkB,EAElBA,UAAWD,EAFO,EAEPA,YAAaE,EAFN,EAEMA,cAC1BiE,EAAkB,SAAArD,GAAG,OAAIkD,EAASrD,EAAUG,KAE5CsD,EAAMlE,EAAa,uBAAmBA,GAAkB,IAE9D,OACE,qCACID,EAAUoE,QACV,6BACE,mEAGDrE,EAAYqE,QACb,kBAAChB,GAAD,CAAUiB,GAAIF,GAAM,KAApB,wBAEF,kBAACxC,EAAD,KACG3B,EAAUkB,KAAI,SAAAL,GAAG,OAChB,kBAAC,GAAD,CACEyD,IAAKzD,EAAIhB,KACTgB,IAAKA,EACL0C,aAAa,EACbC,WAAYU,UCMTK,GA5BO,WACpB,IAAMR,EAAWC,cADS,EAEwBC,aAAY,SAAA7D,GAAK,OAAIA,KAA/DL,EAFkB,EAElBA,YAAaC,EAFK,EAELA,UAAWC,EAFN,EAEMA,cAC1BsD,EAAc,SAAAiB,GAAO,OAAKxE,EAAUyE,MAAK,SAAA5D,GAAG,OAAIA,EAAIhB,OAAS2E,MAC7DhB,EAAa,SAAA3C,GAAG,OACpB0C,EAAY1C,EAAIhB,MAAQkE,EAASxD,EAAQM,IAAQkD,EAASrD,EAAUG,KAEtE,OACE,oCACE,kBAAC2B,GAAD,KACE,4CACc,kBAACE,GAAD,KAAQzC,IAEtB,kBAACwC,GAAD,KAAY1C,EAAYqE,OAAxB,gBAEF,kBAACzC,EAAD,KACG5B,EAAYmB,KAAI,SAAAL,GAAG,OAClB,kBAAC,GAAD,CACEyD,IAAKzD,EAAIhB,KACTgB,IAAKA,EACL0C,YAAaA,EAAY1C,EAAIhB,MAC7B2D,WAAYA,UClBTkB,GANS,kBACtB,kBAACpC,GAAD,KACE,kBAAC,IAAD,CAAM+B,GAAG,eAAT,qBC8BWM,GAvBS,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAKhD,OACE,kBAACjD,GAAD,KACE,kBAACE,GAAD,KACE,kBAACP,EAAD,KACE,kBAAC,IAAD,CAAMoC,QAAS,kBAAMiB,EAAY,KAAKR,GAAG,KAAzC,qBAEF,kBAACpC,GAAD,KACE,kBAACC,GAAD,CAAY6C,SAAUD,GACpB,kBAAC1C,GAAD,CAAa4C,KAAK,OAAOC,MAAOL,EAAUM,SAZ/B,SAAAC,GACnBN,EAAYM,EAAExB,OAAOsB,UAYb,kBAAC/B,GAAD,CAAc8B,KAAK,UAAnB,aAIN,kBAAC,GAAD,QCzBSI,GAJD,WACZ,OAAO,+ECoFMC,GAtEH,WACV,IAAMtB,EAAWC,cACXsB,EAAUC,cAFA,EAGgBC,mBAAS,IAHzB,mBAGTZ,EAHS,KAGCC,EAHD,KAKVY,EADiB,IAAIC,gBAAgBC,cAAcC,QAGnDC,EAAY,SAAArB,GAChBsB,IACGC,IADH,6BAC6BvB,IAC1BwB,MAAK,SAAAC,GACJlC,EAAS5D,EAAe8F,EAASC,UAElCC,OAAM,SAAAC,GACLd,EAAQe,KAAK,cAInBC,qBAAU,WACR,IAAMzG,EAAO4F,EAAMM,IAAI,QACnBlG,GAAsC,YAA9ByF,EAAQiB,SAASC,WAC3BX,EAAUhG,GACVkE,EAASjD,EAAiBjB,IAC1BgF,EAAYhF,MAEb,IAEHyG,qBAAU,WACS,KAAb1B,GAAiBb,EAAS5D,EAAe,OAC5C,CAACyE,IAcJ,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,GAAD,CACEA,SAAUA,EACVC,YAAaA,EACbC,aAlBe,SAAAK,GACnBA,EAAEsB,iBAEE7B,GACFiB,EAAUjB,GACVb,EAASjD,EAAiB8D,IAC1BU,EAAQe,KAAR,uBAA6BzB,KAE7B8B,MAAM,mCAYN,kBAACnE,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,KAAK,WACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUtC,GAAG,W,kBCrEnBuC,GAAyB,CAC7BtC,IAAK,YACLuC,Q,QAAAA,EACAC,UAAW,CAAC,cAGRC,GAAQC,YAAe,CAC3BhG,QAASiG,aAAeL,GAAwBM,GAChDC,WAAYC,YAAqB,CAC/BC,mBAAmB,MAIVC,GAAYC,aAAaR,IACvBA,MCjBfS,IAASC,OACR,kBAAC,IAAD,CAAUV,MAAOA,IAChB,kBAAC,IAAD,CAAaW,QAAS,KAAMJ,UAAWA,IACtC,kBAAC,IAAD,CAAQK,SAAS,eAChB,kBAAC,GAAD,SAIHC,SAASC,eAAe,W","file":"static/js/main.6e8826fa.chunk.js","sourcesContent":["import {\n  createSlice\n} from '@reduxjs/toolkit';\n\nconst gemSearchSlice = createSlice({\n  name: 'gemSearch',\n  initialState: {\n    currentGems: [],\n    savedGems: [],\n    currentSearch: null\n  },\n  reducers: {\n    setCurrentGems(state, action) {\n      state.currentGems = action.payload;\n    },\n    saveGem(state, action) {\n      const newGem = action.payload;\n      state.savedGems.unshift(newGem);\n    },\n    unsaveGem(state, action) {\n      const gemToUnsave = action.payload;\n      state.savedGems = state.savedGems.filter(\n        gem => gem.name !== gemToUnsave.name\n      );\n    },\n    setCurrentSearch(state, action) {\n      state.currentSearch = action.payload;\n    }\n  }\n});\n\nconst {\n  actions,\n  reducer\n} = gemSearchSlice;\n\nexport const {\n  saveGem,\n  unsaveGem,\n  setCurrentGems,\n  setCurrentSearch\n} = actions;\n\nexport default reducer;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Global, css } from '@emotion/core'\nimport styled from '@emotion/styled';\n\nconst breakpoints = [720, 500];\n\nconst mq = breakpoints.map(\n  bp => `@media (max-width: ${bp}px)`\n);\n\nconst colors = {\n  white: '#fff',\n  grey: '#999',\n  lightGrey: '#b0b0b0',\n  orange: '#f09722',\n  rouge: '#d25c71'\n};\n\nexport const GlobalStyle = () => (\n  <Global\n    styles={css`\n      body {\n        font-family: 'Quicksand', sans-serif;\n        margin: 0;\n        padding: 0;\n      }\n    `}\n  />\n);\n\nexport const AppHeader = styled.h1`\n  display: inline;\n  color: ${colors.white};\n  font-weight: 100;\n  ${mq[0]} {\n    display: block;\n    text-align: center;\n  }\n  a {\n    color: ${colors.white};\n    text-decoration: none;\n  }\n`;\n\nexport const GemUl = styled.ul`\n  list-style: none;\n  padding: 0;\n  li {\n    border-bottom: 1px solid ${colors.lightGrey};\n    margin-bottom: 20px;\n\n    :first-of-type {\n      padding-top: 30px;\n    }\n  }\n`;\n\nexport const HeaderWrapper = styled.header`\n  background: ${colors.rouge};\n  background: linear-gradient(\n    90deg,\n    rgba(210,92,113,1) 26%,\n    rgba(255,198,103,1) 79%\n  );\n  padding: 12px;\n  margin: 0;\n`;\n\nexport const SearchSection = styled.div`\n  display: inline;\n  vertical-align: super;\n`;\n\nexport const SearchFormWrapper = styled.div`\n  display: inline-block;\n  padding-left: 20px;\n  ${mq[0]} {\n    display: block;\n    padding-bottom: 20px;\n    text-align: center;\n    padding-left: 0;\n  }\n`;\n\nexport const SearchForm = styled.form`\n  display: inline;\n  vertical-align: super;\n`;\n\nexport const SearchInput = styled.input`\n  padding: 9px 50px 10px 10px;\n  border: 0;\n  border-radius: 15px;\n  width: 140px;\n  :focus {\n    outline: none;\n  }\n  ${mq[0]} {\n    padding: 9px 65px 10px 10px;\n    width: 26%;\n    margin-right: 1%;\n  }\n  ${mq[1]} {\n    width: 38%;\n  }\n`;\n\nexport const ViewSavedLinkSection = styled.div`\n  display: inline;\n  float: right;\n  padding-top: 10px;\n  a {\n    color: ${colors.white};\n    font-weight: 700;\n    background: rgba(255, 255, 255, 0.3);\n    transition: background 0.5s ease-out;\n    padding: 12px;\n    text-decoration: none;\n    border-radius: 20px;\n  }\n  a:hover {\n    background: rgba(255, 255, 255, 0.5);\n  }\n  ${mq[0]} {\n    display: block;\n    float: none;\n    text-align: center;\n    padding-bottom: 30px;\n\n    a {\n      padding: 10px;\n      font-size: 13px;\n      position: relative;\n      right: 0;\n      top: 0;\n      margin-bottom: 20px;\n    }\n  }\n`;\n\nexport const MainContent = styled.div`\n  width: 70%;\n  max-width: 1100px;\n  margin: auto;\n  color: ${colors.grey};\n  font-size: 11pt;\n  padding: 10px 0 50px;\n  a {\n    text-decoration: none;\n  }\n  ${mq[0]} {\n    width: 80%;\n  }\n  ${mq[1]} {\n    width: 85%;\n  }\n`;\n\nexport const MainContentHeader = styled.div`\n  font-weight: lighter;\n  border-bottom: 1px solid ${colors.lightGrey};\n  padding: 20px 0;\n  font-size: 1.3em;\n`;\n\nexport const SubHeader = styled.div`\n  font-size: 0.8em;\n`;\n\nexport const Query = styled.span`\n  color: ${colors.orange};\n  font-size: 1.5em;\n`;\n\nexport const GemName = styled.a`\n  font-size: 1.3em;\n  font-weight: bold;\n  display: inline;\n  color: ${colors.rouge};\n`;\n\nexport const GemDescription = styled.p`\n  padding-bottom: 10px;\n  line-height: 1.5;\n`;\n\nconst StyledButton = styled.button`\n  color: ${colors.white};\n  background-color: ${colors.orange};\n  cursor pointer;\n  border: 0;\n  border-radius: 15px;\n  padding: 8px;\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SearchButton = styled(StyledButton)`\n  position: absolute;\n  left: 470px;\n  font-size: 14px;\n  ${mq[0]} {\n    left: 60%;\n  }\n  ${mq[1]} {\n    left: 63%;\n  }\n`;\n\nexport const SaveButton = styled(StyledButton)`\n  float: right;\n  padding: 5px;\n  border-radius: 12px;\n  font-size: 14px;\n`;\n\nexport const BackLink = styled(Link)`\n  color: ${colors.grey};\n`;\n","import React from 'react';\nimport { SaveButton } from './StyledComponents';\nimport { GemName, GemDescription } from './StyledComponents';\n\nconst Gem = ({ gem, gemNotSaved, handleSave }) => {\n  return (\n    <li>\n      <GemName href={gem.documentation_uri} target=\"_blank\">\n        {gem.name}\n      </GemName>\n      <SaveButton\n        onClick={() => {\n          handleSave(gem);\n        }}\n      >\n        {gemNotSaved ? 'Save' : 'Unsave'} Gem\n      </SaveButton>\n      <GemDescription>{gem.info}</GemDescription>\n    </li>\n  );\n};\n\nexport default Gem;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { unsaveGem } from '../store/gemSearchReducer';\nimport Gem from './Gem';\nimport { GemUl, BackLink } from './StyledComponents';\n\nconst SavedGemsList = () => {\n  const dispatch = useDispatch();\n  const { savedGems, currentGems, currentSearch } = useSelector(state => state);\n  const handleUnsaveGem = gem => dispatch(unsaveGem(gem));\n\n  const url = currentSearch ? `/search?name=${currentSearch}` : '/';\n\n  return (\n    <>\n      {!savedGems.length && (\n        <div>\n          <p>You currently have no saved gems.</p>\n        </div>\n      )}\n      {!!currentGems.length && (\n        <BackLink to={url}>{'<<'} Back To Search Page</BackLink>\n      )}\n      <GemUl>\n        {savedGems.map(gem => (\n          <Gem\n            key={gem.name}\n            gem={gem}\n            gemNotSaved={false}\n            handleSave={handleUnsaveGem}\n          />\n        ))}\n      </GemUl>\n    </>\n  );\n};\nexport default SavedGemsList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { saveGem, unsaveGem } from '../store/gemSearchReducer';\nimport Gem from './Gem';\nimport { GemUl, MainContentHeader, SubHeader, Query } from './StyledComponents';\n\nconst GemResultList = () => {\n  const dispatch = useDispatch();\n  const { currentGems, savedGems, currentSearch } = useSelector(state => state);\n  const gemNotSaved = gemName => !savedGems.find(gem => gem.name === gemName);\n  const handleSave = gem =>\n    gemNotSaved(gem.name) ? dispatch(saveGem(gem)) : dispatch(unsaveGem(gem));\n\n  return (\n    <>\n      <MainContentHeader>\n        <div>\n          Search for: <Query>{currentSearch}</Query>\n        </div>\n        <SubHeader>{currentGems.length} gems found</SubHeader>\n      </MainContentHeader>\n      <GemUl>\n        {currentGems.map(gem => (\n          <Gem\n            key={gem.name}\n            gem={gem}\n            gemNotSaved={gemNotSaved(gem.name)}\n            handleSave={handleSave}\n          />\n        ))}\n      </GemUl>\n    </>\n  );\n};\nexport default GemResultList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ViewSavedLinkSection } from './StyledComponents';\n\nconst ViewSavedButton = () => (\n  <ViewSavedLinkSection>\n    <Link to='/saved_gems'>View Saved Gems</Link>\n  </ViewSavedLinkSection>\n);\n\nexport default ViewSavedButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ViewSavedButton from './ViewSavedButton';\nimport {\n  HeaderWrapper,\n  SearchSection,\n  SearchInput,\n  SearchFormWrapper,\n  SearchForm,\n  SearchButton,\n  AppHeader\n} from './StyledComponents';\n\nconst HeaderSearchBar = ({ formData, setFormData, handleSubmit }) => {\n  const handleChange = e => {\n    setFormData(e.target.value);\n  };\n\n  return (\n    <HeaderWrapper>\n      <SearchSection>\n        <AppHeader>\n          <Link onClick={() => setFormData('')} to='/'>Search Ruby Gems</Link>\n        </AppHeader>\n        <SearchFormWrapper>\n          <SearchForm onSubmit={handleSubmit}>\n            <SearchInput type='text' value={formData} onChange={handleChange} />\n            <SearchButton type='submit'>Search</SearchButton>\n          </SearchForm>\n        </SearchFormWrapper>\n      </SearchSection>\n      <ViewSavedButton />\n    </HeaderWrapper>\n  );\n};\n\nexport default HeaderSearchBar;\n","import React from 'react';\n\nconst Error = () => {\n  return <div>Oops, something went wrong. Please try again!</div>;\n};\n\nexport default Error;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport {\n  Switch,\n  Route,\n  Redirect,\n  useLocation,\n  useHistory\n} from 'react-router-dom';\nimport { setCurrentGems, setCurrentSearch } from '../store/gemSearchReducer';\nimport SavedGemsList from './SavedGemsList';\nimport GemResultList from './GemResultList';\nimport HeaderSearchBar from './HeaderSearchBar';\nimport Error from './Error';\nimport { GlobalStyle, MainContent } from './StyledComponents';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [formData, setFormData] = useState('');\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  const query = useQuery();\n\n  const fetchGems = gemName => {\n    axios\n      .get(`/search.json?query=${gemName}`)\n      .then(response => {\n        dispatch(setCurrentGems(response.data));\n      })\n      .catch(error => {\n        history.push('/error');\n      });\n  };\n\n  useEffect(() => {\n    const name = query.get('name');\n    if (name && history.location.pathname === '/search') {\n      fetchGems(name);\n      dispatch(setCurrentSearch(name));\n      setFormData(name);\n    }\n  }, []);\n  \n  useEffect(() => {\n    if (formData === '') dispatch(setCurrentGems([]))\n  }, [formData])\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (formData) {\n      fetchGems(formData);\n      dispatch(setCurrentSearch(formData));\n      history.push(`/search?name=${formData}`);\n    } else {\n      alert('Please enter a valid search.');\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <HeaderSearchBar\n        formData={formData}\n        setFormData={setFormData}\n        handleSubmit={handleSubmit}\n      />\n      <MainContent>\n        <Switch>\n          <Route path='/search'>\n            <GemResultList />\n          </Route>\n          <Route path='/saved_gems'>\n            <SavedGemsList />\n          </Route>\n          <Route path='/error'>\n            <Error />\n          </Route>\n          <Route path='*'>\n            <Redirect to='/' />\n          </Route>\n        </Switch>\n      </MainContent>\n    </>\n  );\n};\nexport default App;\n","import {\n  configureStore,\n  getDefaultMiddleware\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer\n} from 'redux-persist';\nimport gemSearchReducer from './gemSearchReducer';\nimport storage from 'redux-persist/lib/storage';\n\nconst gemSearchPersistConfig = {\n  key: 'gemSearch',\n  storage,\n  whitelist: ['savedGems']\n};\n\nconst store = configureStore({\n  reducer: persistReducer(gemSearchPersistConfig, gemSearchReducer),\n  middleware: getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\n\nexport const persistor = persistStore(store)\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport store, { persistor } from './store/storeConfig';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t<Router basename='/gem-search'>\n\t\t\t\t<App />\n\t\t\t</Router>\n\t\t</PersistGate>\n\t</Provider>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}